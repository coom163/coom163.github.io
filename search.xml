<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>安装hexo以及切换主题</title>
      <link href="/2019/11/12/an-zhuang-hexo-yi-ji-qie-huan-zhu-ti/"/>
      <url>/2019/11/12/an-zhuang-hexo-yi-ji-qie-huan-zhu-ti/</url>
      
        <content type="html"><![CDATA[<p>本文基于mac平台完成hexo基础环境搭建，win平台仅需安装必须的软件，从第2部分开始都是通用的。</p><h2 id="安装hexo以及切换主题"><a href="#安装hexo以及切换主题" class="headerlink" title="安装hexo以及切换主题"></a>安装hexo以及切换主题</h2><h3 id="1、安装必须的软件"><a href="#1、安装必须的软件" class="headerlink" title="1、安装必须的软件"></a>1、安装必须的软件</h3><p>本文基于mac安装需要的软件，win版可以找一下类似教程。</p><p>mac平台有类似于linux的apt-get的命令——brew。</p><p>0、brew</p><p>只需要在命令行中输入下面对应的命令就可以安装brew。</p><pre class=" language-bash"><code class="language-bash"> /usr/bin/ruby -e <span class="token string">"<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install<span class="token variable">)</span></span>"</span></code></pre><p>其中brew安装之后，对应的目录如下：</p><table><thead><tr><th>对应目录</th><th>对应路径</th></tr></thead><tbody><tr><td>安装目录</td><td>/usr/local/Cellar</td></tr><tr><td>配置目录</td><td>/usr/local/etc</td></tr><tr><td>命令目录</td><td>/usr/local/bin</td></tr></tbody></table><p>常用的brew命令（其他命令可以在网上搜索下）：</p><p>安装软件</p><pre><code>brew install XXXXX</code></pre><p>卸载软件</p><pre><code>brew remove XXXXX</code></pre><p>1、git</p><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">git</span></code></pre><p>2、npm</p><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">npm</span></code></pre><p>3、nodejs</p><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> nodejs</code></pre><h3 id="2、安装hexo"><a href="#2、安装hexo" class="headerlink" title="2、安装hexo"></a>2、安装hexo</h3><p>在完成上述的步骤之后，即可开始hexo的安装过程</p><p>1、输入下面的命令，借助npm安装hexo</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli</code></pre><p>安装完成之后可以借助hexo -v查看hexo的版本。</p><p>2、新建一个文件夹</p><p>进入新建的文件夹内，执行下面的命令，创建hexo</p><pre class=" language-bash"><code class="language-bash">hexo init myblog（文件夹）</code></pre><p>进入刚刚init出来的文件夹，可以发现下面有以下的文件夹：</p><table><thead><tr><th>文件夹名</th><th>作用</th></tr></thead><tbody><tr><td>node_modules</td><td>依赖包</td></tr><tr><td>public</td><td>存放生成的页面</td></tr><tr><td>scaffolds</td><td>生成文章的一些模版</td></tr><tr><td>source</td><td>用来存放文章</td></tr><tr><td>themes</td><td>主题</td></tr><tr><td>_config.yml</td><td>博客的全局配置文件</td></tr></tbody></table><p>此时，可以执行下面的命令，并访问<a href="http://localhost:4000。" target="_blank" rel="noopener">http://localhost:4000。</a></p><pre class=" language-bash"><code class="language-bash">hexo ghexo server</code></pre><p>执行到这里，hexo本地环节已经基本完成，待上传文件到github。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> nom </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/11/12/hello-world/"/>
      <url>/2019/11/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
